#
# conf/meta/castano.yml
#
# Meta-configuration for comparing methods on the data used
# by Castano et al.
#
job: castano # this file configures the function Job.<job>
seed: 876 # random number generator seed
n_reps: 2 # 10
n_bags: 300
test_size: 0.3

# output of configuration expansion and of experiments
configfile: conf/gen/castano.yml
outfile: res/csv/castano.csv

# all data sets to be used
dataset:
  - abalone.ord_chu
  - ailerons_gago
  - auto.data.ord_chu
  - bostonhousing.ord_chu
  - californiahousing_gago
  - cement_strength_gago
  - ERA
  - ESL
  - kinematics_gago
  - LEV
  - SkillCraft1_rev_7clases
  - SkillCraft1_rev_8clases
  - skill_gago
  - stock.ord
  - SWD
  - winequality-red_gago
  - winequality-white_gago_rev

# the parameter grid for the classifier, to be optimized already during configuration
classifier:
  name: "RF ($d=$(max_depth), l=$(min_samples_leaf)$)"
  classifier: RandomForestClassifier
  package: ensemble
  parameters:
    max_depth: [ 1, 5 ] # [ 1, 5, 10, 15, 20, 25, 30 ]
    min_samples_leaf: [ 20 ] # [ 20 ]
    n_estimators: [ 3 ] # [ 100 ]
    random_state: [ 876 ]
    oob_score: [ true ]

# all methods to be compared
method:

  # unfolding methods from QUnfold.jl
  - method_id: ibu
    name: "IBU ($o=$(o), i=$(λ)$) on $(classifier)"
    transformer: classifier
    parameters:
      o: [ 0, 1 ]
      λ: [ 1e-1, 1e-2 ]

  - method_id: run
    name: "RUN ($\\tau=$(τ)$) on $(classifier)"
    transformer: classifier
    parameters:
      τ: [ 1e3, 1e1, 1e-1 ] # count-based loss of RUN requires larger τ values

  - method_id: svd
    name: "SVD ($\\tau=$(τ)$) on $(classifier)"
    transformer: classifier
    parameters:
      τ: [ 1e-1, 1e-3, 1e-5 ]

  # quantification methods from QUnfold.jl
  - method_id: cc
    name: "CC on $(classifier)"

  - method_id: pcc
    name: "PCC on $(classifier)"

  - method_id: acc # softmax ACC
    name: "ACC on $(classifier)"

  - method_id: pacc # softmax PACC
    name: "PACC on $(classifier)"

  - method_id: sld # a.k.a. EMQ
    name: "SLD on $(classifier)"

  - method_id: hdx
    name: "HDx ($(n_bins) bins per feature)"
    parameters:
      n_bins: [4, 8, 16, 32]

  - method_id: hdy
    name: "HDy ($(n_bins) bins per class) on $(classifier)"
    parameters:
      n_bins: [4, 8, 16, 32]

  - method_id: osld # ordinal SLD
    name: "o-SLD ($o=$(o), i=$(λ)$) on $(classifier)"
    parameters:
      o: [ 0, 1 ]
      λ: [ 1e-1, 1e-2 ]

  - method_id: oacc # ordinal ACC
    name: "o-ACC ($\\tau=$(τ)$) on $(classifier)"
    parameters:
      τ: [ 1e-1, 1e-3, 1e-5 ]

  - method_id: opacc # ordinal PACC
    name: "o-PACC ($\\tau=$(τ)$) on $(classifier)"
    parameters:
      τ: [ 1e-1, 1e-3, 1e-5 ]

  - method_id: ohdx # ordinal HDx
    name: "o-HDx ($\\tau=$(τ)$, $(n_bins) bins per feature)"
    parameters:
      τ: [ 1e-1, 1e-3, 1e-5 ]
      n_bins: [4, 8, 16, 32]

  - method_id: ohdy # ordinal HDy
    name: "o-HDy ($\\tau=$(τ)$, $(n_bins) bins per class) on $(classifier)"
    parameters:
      τ: [ 1e-1, 1e-3, 1e-5 ]
      n_bins: [4, 8, 16, 32]
